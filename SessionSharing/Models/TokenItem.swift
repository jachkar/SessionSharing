//
//  TokenItem.swift
//
//
//  -- auto-generated by JSON2Swift --
//

import Foundation


struct TokenItem {
    var name: String
    var value: String
    var path: String
    var id: Int
    var storeId: String
    var secure: Bool
    var sameSite: String
    var session: Bool
    var expirationDate: Int
    var hostOnly: Bool
    var domain: String
    var httpOnly: Bool


    init?(json: [String: Any]?) {
        guard let json = json else {return nil}
        name = json["name"] as? String ?? ""
        value = json["value"] as? String ?? ""
        path = json["path"] as? String ?? ""
        id = json["id"] as? Int ?? 0
        storeId = json["storeId"] as? String ?? ""
        secure = json["secure"] as? Bool ?? false
        sameSite = json["sameSite"] as? String ?? ""
        session = json["session"] as? Bool ?? false
        expirationDate = json["expirationDate"] as? Int ?? 0
        hostOnly = json["hostOnly"] as? Bool ?? false
        domain = json["domain"] as? String ?? ""
        httpOnly = json["httpOnly"] as? Bool ?? false
    }



    init() {
        self.init(json: [:])!
    }



    init?(data: Data?) {
        guard let data = data else {return nil}
        guard let json = (try? JSONSerialization.jsonObject(with: data, options: [])) as? [String: Any] else {return nil}
        self.init(json: json)
    }



    init(name: String, value: String, path: String, id: Int, storeId: String, secure: Bool, sameSite: String, session: Bool, expirationDate: Int, hostOnly: Bool, domain: String, httpOnly: Bool) {
        self.name = name
        self.value = value
        self.path = path
        self.id = id
        self.storeId = storeId
        self.secure = secure
        self.sameSite = sameSite
        self.session = session
        self.expirationDate = expirationDate
        self.hostOnly = hostOnly
        self.domain = domain
        self.httpOnly = httpOnly
    }



    /// This function generate a json dictionary from the model.
    ///
    /// - Parameter useOriginalJsonKey: This parameter take effect only when you have modified a property's name making it different to the original json key. If true, the original json key will be used when generate json dictionary, otherwise, the modified property name will be used as key in the dictionary.
    func jsonDictionary(useOriginalJsonKey: Bool) -> [String: Any] {
        var dict: [String: Any] = [:]
        dict["name"] = name
        dict["value"] = value
        dict["path"] = path
        dict["id"] = id
        dict["storeId"] = storeId
        dict["secure"] = secure
        dict["sameSite"] = sameSite
        dict["session"] = session
        dict["expirationDate"] = expirationDate
        dict["hostOnly"] = hostOnly
        dict["domain"] = domain
        dict["httpOnly"] = httpOnly
        return dict
    }



}



